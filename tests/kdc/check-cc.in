#!/bin/sh
#
# Copyright (c) 2006 - 2008 Kungliga Tekniska HÃ¶gskolan
# (Royal Institute of Technology, Stockholm, Sweden). 
# All rights reserved. 
#
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions 
# are met: 
#
# 1. Redistributions of source code must retain the above copyright 
#    notice, this list of conditions and the following disclaimer. 
#
# 2. Redistributions in binary form must reproduce the above copyright 
#    notice, this list of conditions and the following disclaimer in the 
#    documentation and/or other materials provided with the distribution. 
#
# 3. Neither the name of the Institute nor the names of its contributors 
#    may be used to endorse or promote products derived from this software 
#    without specific prior written permission. 
#
# THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
# ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
# SUCH DAMAGE. 

env_setup="@env_setup@"
objdir="@objdir@"

. ${env_setup}

KRB5_CONFIG="${objdir}/krb5.conf"
export KRB5_CONFIG

unset KRB5CCNAME

testfailed="echo test failed; exit 1"

# If there is no useful db support compiled in, disable test
${have_db} || exit 77

R=TEST.H5L.SE

port=@port@
pwport=@pwport@

kinit="${kinit} --password-file=${objdir}/foopassword ${afs_no_afslog}"
kdestroy="${kdestroy} ${afs_no_unlog}"
kadmin="${kadmin} -l -r $R"
kdc="${kdc} --addresses=localhost -P $port"

server=host/datan.test.h5l.se
cache="FILE:${objdir}/cache.krb5"
keytabfile=${objdir}/server.keytab
keytab="FILE:${keytabfile}"

rm -f ${keytabfile}
rm -f current-db*
rm -f out-*
rm -f mkey.file*

> messages.log

echo Creating database
${kadmin} \
    init \
    --realm-max-ticket-life=1day \
    --realm-max-renewable-life=1month \
    ${R} || exit 1

${kadmin} add -p foo --use-defaults foo:admin@${R} || exit 1
${kadmin} add -p foo --use-defaults foo+admin@${R} || exit 1
${kadmin} add -p foo --use-defaults foo/admin@${R} || exit 1
${kadmin} add -p foo --use-defaults foo@${R} || exit 1
${kadmin} add -p foo --use-defaults bar@${R} || exit 1
${kadmin} add -p kaka --use-defaults ${server}@${R} || exit 1
${kadmin} ext -k ${keytab} ${server}@${R} || exit 1

echo "Doing database check"
${kadmin} check ${R} || exit 1

echo foo > ${objdir}/foopassword

echo Starting kdc ; > messages.log
${kdc} --detach --testing || { echo "kdc failed to start"; cat messages.log; exit 1; }
kdcpid=`getpid kdc`

echo Starting kcm ; > messages.log
${kcm} -s ${objdir} --detach || { echo "kcm failed to start"; cat messages.log; exit 1; }
kcmpid=`getpid kcm`

HEIM_IPC_DIR=${objdir}
export HEIM_IPC_DIR

trap "kill -9 ${kdcpid} ${kcmpid}; echo signal killing kdc and kcm; exit 1;" EXIT

ec=0

# Test FILE ccache and collection support
export KRB5CCNAME=FILE:${objdir}/fcc
${kdestroy} -A
${kinit} foo@${R} || { ec=1 ; eval "${testfailed}"; }
${kinit} --no-change-default --default-for-principal bar@${R} || { ec=1 ; eval "${testfailed}"; }
${klist} -C |grep "^${KRB5CCNAME}$" >/dev/null || { ec=1 ; eval "${testfailed}"; }
${klist} -l |grep "fcc[+]bar@${R}" >/dev/null || { ec=1 ; eval "${testfailed}"; }
set -- `${klist} -l -C --default-for=foo@${R}`
[ $# -eq 1 -a $1 = FILE:${objdir}/fcc+foo@${R} ] || { ec=1 ; eval "${testfailed}"; }
set -- `${klist} -l -C --default-for=bar@${R}`
[ $# -eq 1 -a $1 = FILE:${objdir}/fcc+bar@${R} ] || { ec=1 ; eval "${testfailed}"; }
set --
${kswitch} -p foo@${R} ${klist} -C | grep "^${KRB5CCNAME}$" >/dev/null || { ec=1 ; eval "${testfailed}"; }
${kswitch} -p bar@${R} ${klist} -C | grep "^${KRB5CCNAME}+bar@${R}$" >/dev/null || { ec=1 ; eval "${testfailed}"; }
${kdestroy} -A


export KRB5CCNAME=SCC:${objdir}/sdb

${kdestroy} -A
${kswitch} -p foo@${R} 2>/dev/null && ${kdestroy}
${kswitch} -p foo@${R} 2>/dev/null && ${kdestroy}
${kswitch} -p bar@${R} 2>/dev/null && ${kdestroy}
${kswitch} -p bar@${R} 2>/dev/null && ${kdestroy}

echo "getting default tickets"; > messages.log
${kinit} foo@${R} || { ec=1 ; eval "${testfailed}"; }
${kswitch} -p foo@${R} || { ec=1 ; eval "${testfailed}"; }
${klist} -l | grep foo@ >/dev/null || { ec=1 ; eval "${testfailed}"; }
${kdestroy}

echo "getting both tickets"; > messages.log
${kinit} -c ${KRB5CCNAME}:1 foo@${R} || { ec=1 ; eval "${testfailed}"; }
${kinit} -c ${KRB5CCNAME}:2 bar@${R} || { ec=1 ; eval "${testfailed}"; }
echo "switch foo"
${kswitch} -p foo@${R} || { ec=1 ; eval "${testfailed}"; }
${klist} | head -2 | grep foo@ >/dev/null || { ec=1 ; eval "${testfailed}"; }
${klist} -l | grep foo@ >/dev/null || { ec=1 ; eval "${testfailed}"; }
${klist} -l | grep bar@ >/dev/null || { ec=1 ; eval "${testfailed}"; }
echo "switch bar"
${kswitch} -p bar@${R} || { ec=1 ; eval "${testfailed}"; }
${klist} | head -2 | grep bar@ >/dev/null || { ec=1 ; eval "${testfailed}"; }
${klist} -l | grep foo@ >/dev/null || { ec=1 ; eval "${testfailed}"; }
${klist} -l | grep bar@ >/dev/null || { ec=1 ; eval "${testfailed}"; }
echo "delete bar"
${kdestroy}
echo "check that bar is gone"
${klist} -l | grep bar@ >/dev/null && { ec=1 ; eval "${testfailed}"; }
echo "check that foo is still there"
${klist} -l | grep foo@ >/dev/null || { ec=1 ; eval "${testfailed}"; }
${kswitch} -p foo@${R} || { ec=1 ; eval "${testfailed}"; }
echo "delete foo"
${kdestroy} || { ec=1 ; eval "${testfailed}"; }
echo "check that foo is gone"
${klist} -l | grep foo@ >/dev/null && { ec=1 ; eval "${testfailed}"; }
echo "check that bar is gone"
${klist} -l | grep bar@ >/dev/null && { ec=1 ; eval "${testfailed}"; }

echo "getting tickets (KCM)"; > messages.log
KRB5_CONFIG="${objdir}/krb5-kcm.conf"
export KRB5_CONFIG
unset KRB5CCNAME
${kdestroy} -A
# Check that we're NOT escaping / when using KCM (FILE and DIR might, but SCC,
# KCM, and API must not).
${kinit} --default-for-principal foo/admin@${R} || { ec=1 ; eval "${testfailed}"; }
${kinit} --default-for-principal foo:admin@${R} || { ec=1 ; eval "${testfailed}"; }
${kinit} --default-for-principal foo+admin@${R} || { ec=1 ; eval "${testfailed}"; }
${klist} -l | grep "foo[/]admin.${R}" >/dev/null || { ec=1 ; eval "${testfailed}"; }
${klist} -l | grep "foo[:]admin.${R}" >/dev/null || { ec=1 ; eval "${testfailed}"; }
${klist} -l | grep "foo[+]admin.${R}" >/dev/null || { ec=1 ; eval "${testfailed}"; }
${kdestroy} -A
${kinit} --default-for-principal foo@${R} || { ec=1 ; eval "${testfailed}"; }
${kinit} --unique bar@${R} 2>&1 | egrep '^Using cache: (KCM|API):[0-9][0-9]*:[0-9]' || { ec=1 ; eval "${testfailed}"; }
${klist} | grep bar@${R} > /dev/null || { ec=1 ; eval "${testfailed}"; }
${kdestroy} -A
${kinit} --unique foo@${R} || { ec=1 ; eval "${testfailed}"; }
${kinit} --search --verbose foo@${R} 2>&1 | egrep '^Using cache: (KCM|API):[0-9][0-9]*:[0-9]' || { ec=1 ; eval "${testfailed}"; }
# Now we should get a default-for-principal cache:
${kdestroy} -A
${kinit} --search --verbose foo@${R} 2>&1 | egrep '^Using cache: (KCM|API):[0-9][0-9]*:[0-9]' && { ec=1 ; eval "${testfailed}"; }
${kdestroy} -A
${kinit} --search --verbose foo@${R} 2>&1 | egrep '^Using cache: (KCM|API):[0-9][0-9]*:foo' || { ec=1 ; eval "${testfailed}"; }
${kdestroy} -A
${kinit} --default-for-principal foo@${R} || { ec=1 ; eval "${testfailed}"; }
${kinit} --default-for-principal bar@${R} || { ec=1 ; eval "${testfailed}"; }
${kinit} bar@${R} || { ec=1 ; eval "${testfailed}"; }
${klist} > /dev/null || { ec=1 ; eval "${testfailed}"; }
${klist} | grep bar@${R} > /dev/null || { ec=1 ; eval "${testfailed}"; }
${klist} | grep foo@${R} > /dev/null && { ec=1 ; eval "${testfailed}"; }
${klist} -l | grep bar@${R} > /dev/null || { ec=1 ; eval "${testfailed}"; }
${klist} -l | grep foo@${R} > /dev/null || { ec=1 ; eval "${testfailed}"; }
${klist} -c KCM: | grep bar@${R} > /dev/null || { ec=1 ; eval "${testfailed}"; }
KRB5CCNAME=KCM: ${klist} | grep bar@${R} > /dev/null || { ec=1 ; eval "${testfailed}"; }
case $(uname -s) in
Darwin) true;;
*)  # On OS X we end up talking to the system KCM, which doesn't support this:
    uid=$(id -u)
    if [ -n "$uid" ]; then
        ${klist} -c KCM:${uid} | grep bar@${R} > /dev/null || { ec=1 ; eval "${testfailed}"; }
        KRB5CCNAME=KCM:${uid} ${klist} | grep bar@${R} > /dev/null || { ec=1 ; eval "${testfailed}"; }
    fi;;
esac
${kdestroy} -A
${kinit} bar@${R} ${klist} | grep bar@${R} > /dev/null || { ec=1 ; eval "${testfailed}"; }
${kdestroy} -A
${klist} 2>/dev/null && { ec=1 ; eval "${testfailed}"; }
${klist} -l | grep bar@${R} > /dev/null && { ec=1 ; eval "${testfailed}"; }
${klist} -l | grep foo@${R} > /dev/null && { ec=1 ; eval "${testfailed}"; }
${kinit} bar@${R}
${kinit} --default-for-principal foo@${R}
${klist} > /dev/null || { ec=1 ; eval "${testfailed}"; }
${klist} | grep bar@${R} > /dev/null && { ec=1 ; eval "${testfailed}"; }
${klist} | grep foo@${R} > /dev/null || { ec=1 ; eval "${testfailed}"; }
${klist} -l | grep bar@${R} > /dev/null || { ec=1 ; eval "${testfailed}"; }
${klist} -l | grep foo@${R} > /dev/null || { ec=1 ; eval "${testfailed}"; }
${klist} -c KCM: | grep foo@${R} > /dev/null || { ec=1 ; eval "${testfailed}"; }
KRB5CCNAME=KCM: ${klist} | grep foo@${R} > /dev/null || { ec=1 ; eval "${testfailed}"; }
${kdestroy} -A
if [ -n "$uid" ]; then
    ${kinit} -c KCM:${uid}:foobar --no-change-default foo@${R}
    ${kinit} -c KCM:${uid}:foobar --no-change-default bar@${R} && { ec=1 ; eval "${testfailed}"; }
    ${kinit} -c KCM:${uid}:foobar --overwrite --no-change-default bar@${R} || { ec=1 ; eval "${testfailed}"; }
    ${kinit} -c KCM:${uid}:foobar --overwrite --no-change-default foo@${R} || { ec=1 ; eval "${testfailed}"; }
    KRB5CCNAME=KCM:${uid}:foobar ${kinit} --no-change-default foo@${R}
    KRB5CCNAME=KCM:${uid}:barfoo ${kinit} --no-change-default bar@${R}
    KRB5CCNAME=KCM:${uid}:barfoo ${klist} > /dev/null || { ec=1 ; eval "${testfailed}"; }
    KRB5CCNAME=KCM:${uid}:barfoo ${klist} | grep bar@${R} > /dev/null || { ec=1 ; eval "${testfailed}"; }
    KRB5CCNAME=KCM:${uid}:barfoo ${klist} | grep barfoo > /dev/null || { ec=1 ; eval "${testfailed}"; }
    KRB5CCNAME=KCM:${uid}:barfoo ${klist} | grep foo@${R} > /dev/null && { ec=1 ; eval "${testfailed}"; }
    KRB5CCNAME=KCM:${uid}:barfoo ${klist} | grep foobar > /dev/null && { ec=1 ; eval "${testfailed}"; }
    KRB5CCNAME=KCM:${uid}:barfoo ${klist} -l | grep bar@${R} > /dev/null || { ec=1 ; eval "${testfailed}"; }
    KRB5CCNAME=KCM:${uid}:barfoo ${klist} -l | grep barfoo > /dev/null || { ec=1 ; eval "${testfailed}"; }
    KRB5CCNAME=KCM:${uid}:barfoo ${klist} -l | grep foo@${R} > /dev/null || { ec=1 ; eval "${testfailed}"; }
    KRB5CCNAME=KCM:${uid}:barfoo ${klist} -l | grep foobar > /dev/null || { ec=1 ; eval "${testfailed}"; }
    KRB5CCNAME=KCM:${uid}:barfoo ${klist} -c KCM: | grep bar@${R} > /dev/null || { ec=1 ; eval "${testfailed}"; }
    KRB5CCNAME=KCM: ${klist} | grep bar@${R} > /dev/null || { ec=1 ; eval "${testfailed}"; }
    KRB5CCNAME=KCM:${uid}:barfoo ${kdestroy} -A
fi

echo "getting tickets (DIR)"; > messages.log
KRB5_CONFIG="${objdir}/krb5-cccol.conf"
export KRB5_CONFIG
unset KRB5CCNAME
rm -rf ${objdir}/kt ${objdir}/cc_dir
mkdir ${objdir}/cc_dir || { ec=1 ; eval "${testfailed}"; }
${kinit} --default-for-principal foo@${R} || { ec=1 ; eval "${testfailed}"; }
${kinit} --default-for-principal --no-change-default bar@${R} || { ec=1 ; eval "${testfailed}"; }
primary=`cat ${objdir}/cc_dir/primary`
[ "x$primary" = xtktfoo@${R} ] || { ec=1 ; eval "${testfailed}"; }
${klist} -l |
    grep "foo@TEST.H5L.SE.*FILE:${objdir}/cc_dir/tktfoo@TEST.H5L.SE" > /dev/null ||
    { ec=1 ; eval "${testfailed}"; }
${klist} -l |
    grep "bar@TEST.H5L.SE.*FILE:${objdir}/cc_dir/tktbar@TEST.H5L.SE" > /dev/null ||
    { ec=1 ; eval "${testfailed}"; }

echo "killing kcm (${kcmpid})"
sh ${leaks_kill} kcm $kcmpid || { kill -9 ${kdcpid}; exit 1; }

echo "killing kdc (${kdcpid})"
sh ${leaks_kill} kdc $kdcpid || exit 1

trap "" EXIT

exit $ec
